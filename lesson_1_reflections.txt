This is the first line to the file
this is the second line on the version control reflection to this file
The version control like Git allow saving multiple file, its because, files that relates to code repository might be inter-dependant on each other. A change in one file is reflected across other files in the package
You can use git command log to view commit is, commit message, commit date and details. 
While we can use commit diff to check the lines and where changes were made to the file. The command is: git diff previous commit id  recent commit id
I will use git to keep track of different versions of my files and code. detail description of the changes made to the file.

Question 4: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When we want to make changes/test to our code, and fear not to break the main code. Make a copy of the code, make the changes and test the changes.
It help us ensure that, changes are tried, tested and working before they are added to the main code. It also helps us, not interupt deployed project or code, while we are making changes. 

Question 5: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The branches become one node, the master. The changes on both branches are applied to the new master node. Commit can still be tracked even when the branch nolonger exist. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merge will keep the file insync and merge conflict are noticed immediately, however manual merging are delibrate, and conflicts may be hard to find when troubleshooting. 
